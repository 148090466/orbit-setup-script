/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface L1AtomicTokenBridgeCreatorInterface extends ethers.utils.Interface {
  functions: {
    'canonicalL2BeaconProxyFactoryAddress()': FunctionFragment
    'canonicalL2FactoryAddress()': FunctionFragment
    'canonicalL2ProxyAdminAddress()': FunctionFragment
    'createTokenBridge(address,uint256,uint256)': FunctionFragment
    'gasLimitForL2FactoryDeployment()': FunctionFragment
    'getCanonicalL1RouterAddress(address)': FunctionFragment
    'getCanonicalL2CustomGatewayAddress()': FunctionFragment
    'getCanonicalL2RouterAddress()': FunctionFragment
    'getCanonicalL2StandardGatewayAddress()': FunctionFragment
    'getCanonicalL2UpgradeExecutorAddress()': FunctionFragment
    'getCanonicalL2WethAddress()': FunctionFragment
    'getCanonicalL2WethGatewayAddress()': FunctionFragment
    'getRouter(address)': FunctionFragment
    'inboxToNonCanonicalRouter(address)': FunctionFragment
    'initialize(address)': FunctionFragment
    'l1Templates()': FunctionFragment
    'l1Weth()': FunctionFragment
    'l2CustomGatewayTemplate()': FunctionFragment
    'l2RouterTemplate()': FunctionFragment
    'l2StandardGatewayTemplate()': FunctionFragment
    'l2TokenBridgeFactoryTemplate()': FunctionFragment
    'l2WethGatewayTemplate()': FunctionFragment
    'l2WethTemplate()': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'retryableSender()': FunctionFragment
    'setNonCanonicalRouter(address,address)': FunctionFragment
    'setTemplates((address,address,address,address,address,address,address,address),address,address,address,address,address,address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'canonicalL2BeaconProxyFactoryAddress',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'canonicalL2FactoryAddress',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'canonicalL2ProxyAdminAddress',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'createTokenBridge',
    values: [string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'gasLimitForL2FactoryDeployment',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getCanonicalL1RouterAddress',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'getCanonicalL2CustomGatewayAddress',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getCanonicalL2RouterAddress',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getCanonicalL2StandardGatewayAddress',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getCanonicalL2UpgradeExecutorAddress',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getCanonicalL2WethAddress',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getCanonicalL2WethGatewayAddress',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'getRouter', values: [string]): string
  encodeFunctionData(
    functionFragment: 'inboxToNonCanonicalRouter',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string
  encodeFunctionData(
    functionFragment: 'l1Templates',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'l1Weth', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'l2CustomGatewayTemplate',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2RouterTemplate',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2StandardGatewayTemplate',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2TokenBridgeFactoryTemplate',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2WethGatewayTemplate',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2WethTemplate',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'retryableSender',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setNonCanonicalRouter',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'setTemplates',
    values: [
      {
        routerTemplate: string
        standardGatewayTemplate: string
        customGatewayTemplate: string
        wethGatewayTemplate: string
        feeTokenBasedRouterTemplate: string
        feeTokenBasedStandardGatewayTemplate: string
        feeTokenBasedCustomGatewayTemplate: string
        upgradeExecutor: string
      },
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string

  decodeFunctionResult(
    functionFragment: 'canonicalL2BeaconProxyFactoryAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'canonicalL2FactoryAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'canonicalL2ProxyAdminAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'createTokenBridge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'gasLimitForL2FactoryDeployment',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCanonicalL1RouterAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCanonicalL2CustomGatewayAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCanonicalL2RouterAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCanonicalL2StandardGatewayAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCanonicalL2UpgradeExecutorAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCanonicalL2WethAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCanonicalL2WethGatewayAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getRouter', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'inboxToNonCanonicalRouter',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'l1Templates', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'l1Weth', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'l2CustomGatewayTemplate',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'l2RouterTemplate',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'l2StandardGatewayTemplate',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'l2TokenBridgeFactoryTemplate',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'l2WethGatewayTemplate',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'l2WethTemplate',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'retryableSender',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setNonCanonicalRouter',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setTemplates',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result

  events: {
    'Initialized(uint8)': EventFragment
    'NonCanonicalRouterSet(address,address)': EventFragment
    'OrbitTokenBridgeCreated(address,address,address,address,address,address,address,address)': EventFragment
    'OrbitTokenBridgeTemplatesUpdated()': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NonCanonicalRouterSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OrbitTokenBridgeCreated'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'OrbitTokenBridgeTemplatesUpdated'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>

export type NonCanonicalRouterSetEvent = TypedEvent<
  [string, string] & { inbox: string; router: string }
>

export type OrbitTokenBridgeCreatedEvent = TypedEvent<
  [string, string, string, string, string, string, string, string] & {
    inbox: string
    owner: string
    router: string
    standardGateway: string
    customGateway: string
    wethGateway: string
    proxyAdmin: string
    upgradeExecutor: string
  }
>

export type OrbitTokenBridgeTemplatesUpdatedEvent = TypedEvent<[] & {}>

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>

export class L1AtomicTokenBridgeCreator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: L1AtomicTokenBridgeCreatorInterface

  functions: {
    canonicalL2BeaconProxyFactoryAddress(
      overrides?: CallOverrides
    ): Promise<[string]>

    canonicalL2FactoryAddress(overrides?: CallOverrides): Promise<[string]>

    canonicalL2ProxyAdminAddress(overrides?: CallOverrides): Promise<[string]>

    createTokenBridge(
      inbox: string,
      maxGasForContracts: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    gasLimitForL2FactoryDeployment(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getCanonicalL1RouterAddress(
      inbox: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    getCanonicalL2CustomGatewayAddress(
      overrides?: CallOverrides
    ): Promise<[string]>

    getCanonicalL2RouterAddress(overrides?: CallOverrides): Promise<[string]>

    getCanonicalL2StandardGatewayAddress(
      overrides?: CallOverrides
    ): Promise<[string]>

    getCanonicalL2UpgradeExecutorAddress(
      overrides?: CallOverrides
    ): Promise<[string]>

    getCanonicalL2WethAddress(overrides?: CallOverrides): Promise<[string]>

    getCanonicalL2WethGatewayAddress(
      overrides?: CallOverrides
    ): Promise<[string]>

    getRouter(inbox: string, overrides?: CallOverrides): Promise<[string]>

    inboxToNonCanonicalRouter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    initialize(
      _retryableSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    l1Templates(overrides?: CallOverrides): Promise<
      [string, string, string, string, string, string, string, string] & {
        routerTemplate: string
        standardGatewayTemplate: string
        customGatewayTemplate: string
        wethGatewayTemplate: string
        feeTokenBasedRouterTemplate: string
        feeTokenBasedStandardGatewayTemplate: string
        feeTokenBasedCustomGatewayTemplate: string
        upgradeExecutor: string
      }
    >

    l1Weth(overrides?: CallOverrides): Promise<[string]>

    l2CustomGatewayTemplate(overrides?: CallOverrides): Promise<[string]>

    l2RouterTemplate(overrides?: CallOverrides): Promise<[string]>

    l2StandardGatewayTemplate(overrides?: CallOverrides): Promise<[string]>

    l2TokenBridgeFactoryTemplate(overrides?: CallOverrides): Promise<[string]>

    l2WethGatewayTemplate(overrides?: CallOverrides): Promise<[string]>

    l2WethTemplate(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    retryableSender(overrides?: CallOverrides): Promise<[string]>

    setNonCanonicalRouter(
      inbox: string,
      nonCanonicalRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setTemplates(
      _l1Templates: {
        routerTemplate: string
        standardGatewayTemplate: string
        customGatewayTemplate: string
        wethGatewayTemplate: string
        feeTokenBasedRouterTemplate: string
        feeTokenBasedStandardGatewayTemplate: string
        feeTokenBasedCustomGatewayTemplate: string
        upgradeExecutor: string
      },
      _l2TokenBridgeFactoryTemplate: string,
      _l2RouterTemplate: string,
      _l2StandardGatewayTemplate: string,
      _l2CustomGatewayTemplate: string,
      _l2WethGatewayTemplate: string,
      _l2WethTemplate: string,
      _l1Weth: string,
      _gasLimitForL2FactoryDeployment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  canonicalL2BeaconProxyFactoryAddress(
    overrides?: CallOverrides
  ): Promise<string>

  canonicalL2FactoryAddress(overrides?: CallOverrides): Promise<string>

  canonicalL2ProxyAdminAddress(overrides?: CallOverrides): Promise<string>

  createTokenBridge(
    inbox: string,
    maxGasForContracts: BigNumberish,
    gasPriceBid: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  gasLimitForL2FactoryDeployment(overrides?: CallOverrides): Promise<BigNumber>

  getCanonicalL1RouterAddress(
    inbox: string,
    overrides?: CallOverrides
  ): Promise<string>

  getCanonicalL2CustomGatewayAddress(overrides?: CallOverrides): Promise<string>

  getCanonicalL2RouterAddress(overrides?: CallOverrides): Promise<string>

  getCanonicalL2StandardGatewayAddress(
    overrides?: CallOverrides
  ): Promise<string>

  getCanonicalL2UpgradeExecutorAddress(
    overrides?: CallOverrides
  ): Promise<string>

  getCanonicalL2WethAddress(overrides?: CallOverrides): Promise<string>

  getCanonicalL2WethGatewayAddress(overrides?: CallOverrides): Promise<string>

  getRouter(inbox: string, overrides?: CallOverrides): Promise<string>

  inboxToNonCanonicalRouter(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>

  initialize(
    _retryableSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  l1Templates(overrides?: CallOverrides): Promise<
    [string, string, string, string, string, string, string, string] & {
      routerTemplate: string
      standardGatewayTemplate: string
      customGatewayTemplate: string
      wethGatewayTemplate: string
      feeTokenBasedRouterTemplate: string
      feeTokenBasedStandardGatewayTemplate: string
      feeTokenBasedCustomGatewayTemplate: string
      upgradeExecutor: string
    }
  >

  l1Weth(overrides?: CallOverrides): Promise<string>

  l2CustomGatewayTemplate(overrides?: CallOverrides): Promise<string>

  l2RouterTemplate(overrides?: CallOverrides): Promise<string>

  l2StandardGatewayTemplate(overrides?: CallOverrides): Promise<string>

  l2TokenBridgeFactoryTemplate(overrides?: CallOverrides): Promise<string>

  l2WethGatewayTemplate(overrides?: CallOverrides): Promise<string>

  l2WethTemplate(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  retryableSender(overrides?: CallOverrides): Promise<string>

  setNonCanonicalRouter(
    inbox: string,
    nonCanonicalRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setTemplates(
    _l1Templates: {
      routerTemplate: string
      standardGatewayTemplate: string
      customGatewayTemplate: string
      wethGatewayTemplate: string
      feeTokenBasedRouterTemplate: string
      feeTokenBasedStandardGatewayTemplate: string
      feeTokenBasedCustomGatewayTemplate: string
      upgradeExecutor: string
    },
    _l2TokenBridgeFactoryTemplate: string,
    _l2RouterTemplate: string,
    _l2StandardGatewayTemplate: string,
    _l2CustomGatewayTemplate: string,
    _l2WethGatewayTemplate: string,
    _l2WethTemplate: string,
    _l1Weth: string,
    _gasLimitForL2FactoryDeployment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    canonicalL2BeaconProxyFactoryAddress(
      overrides?: CallOverrides
    ): Promise<string>

    canonicalL2FactoryAddress(overrides?: CallOverrides): Promise<string>

    canonicalL2ProxyAdminAddress(overrides?: CallOverrides): Promise<string>

    createTokenBridge(
      inbox: string,
      maxGasForContracts: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    gasLimitForL2FactoryDeployment(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCanonicalL1RouterAddress(
      inbox: string,
      overrides?: CallOverrides
    ): Promise<string>

    getCanonicalL2CustomGatewayAddress(
      overrides?: CallOverrides
    ): Promise<string>

    getCanonicalL2RouterAddress(overrides?: CallOverrides): Promise<string>

    getCanonicalL2StandardGatewayAddress(
      overrides?: CallOverrides
    ): Promise<string>

    getCanonicalL2UpgradeExecutorAddress(
      overrides?: CallOverrides
    ): Promise<string>

    getCanonicalL2WethAddress(overrides?: CallOverrides): Promise<string>

    getCanonicalL2WethGatewayAddress(overrides?: CallOverrides): Promise<string>

    getRouter(inbox: string, overrides?: CallOverrides): Promise<string>

    inboxToNonCanonicalRouter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>

    initialize(
      _retryableSender: string,
      overrides?: CallOverrides
    ): Promise<void>

    l1Templates(overrides?: CallOverrides): Promise<
      [string, string, string, string, string, string, string, string] & {
        routerTemplate: string
        standardGatewayTemplate: string
        customGatewayTemplate: string
        wethGatewayTemplate: string
        feeTokenBasedRouterTemplate: string
        feeTokenBasedStandardGatewayTemplate: string
        feeTokenBasedCustomGatewayTemplate: string
        upgradeExecutor: string
      }
    >

    l1Weth(overrides?: CallOverrides): Promise<string>

    l2CustomGatewayTemplate(overrides?: CallOverrides): Promise<string>

    l2RouterTemplate(overrides?: CallOverrides): Promise<string>

    l2StandardGatewayTemplate(overrides?: CallOverrides): Promise<string>

    l2TokenBridgeFactoryTemplate(overrides?: CallOverrides): Promise<string>

    l2WethGatewayTemplate(overrides?: CallOverrides): Promise<string>

    l2WethTemplate(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    retryableSender(overrides?: CallOverrides): Promise<string>

    setNonCanonicalRouter(
      inbox: string,
      nonCanonicalRouter: string,
      overrides?: CallOverrides
    ): Promise<void>

    setTemplates(
      _l1Templates: {
        routerTemplate: string
        standardGatewayTemplate: string
        customGatewayTemplate: string
        wethGatewayTemplate: string
        feeTokenBasedRouterTemplate: string
        feeTokenBasedStandardGatewayTemplate: string
        feeTokenBasedCustomGatewayTemplate: string
        upgradeExecutor: string
      },
      _l2TokenBridgeFactoryTemplate: string,
      _l2RouterTemplate: string,
      _l2StandardGatewayTemplate: string,
      _l2CustomGatewayTemplate: string,
      _l2WethGatewayTemplate: string,
      _l2WethTemplate: string,
      _l1Weth: string,
      _gasLimitForL2FactoryDeployment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'Initialized(uint8)'(
      version?: null
    ): TypedEventFilter<[number], { version: number }>

    Initialized(version?: null): TypedEventFilter<[number], { version: number }>

    'NonCanonicalRouterSet(address,address)'(
      inbox?: string | null,
      router?: string | null
    ): TypedEventFilter<[string, string], { inbox: string; router: string }>

    NonCanonicalRouterSet(
      inbox?: string | null,
      router?: string | null
    ): TypedEventFilter<[string, string], { inbox: string; router: string }>

    'OrbitTokenBridgeCreated(address,address,address,address,address,address,address,address)'(
      inbox?: string | null,
      owner?: string | null,
      router?: null,
      standardGateway?: null,
      customGateway?: null,
      wethGateway?: null,
      proxyAdmin?: null,
      upgradeExecutor?: null
    ): TypedEventFilter<
      [string, string, string, string, string, string, string, string],
      {
        inbox: string
        owner: string
        router: string
        standardGateway: string
        customGateway: string
        wethGateway: string
        proxyAdmin: string
        upgradeExecutor: string
      }
    >

    OrbitTokenBridgeCreated(
      inbox?: string | null,
      owner?: string | null,
      router?: null,
      standardGateway?: null,
      customGateway?: null,
      wethGateway?: null,
      proxyAdmin?: null,
      upgradeExecutor?: null
    ): TypedEventFilter<
      [string, string, string, string, string, string, string, string],
      {
        inbox: string
        owner: string
        router: string
        standardGateway: string
        customGateway: string
        wethGateway: string
        proxyAdmin: string
        upgradeExecutor: string
      }
    >

    'OrbitTokenBridgeTemplatesUpdated()'(): TypedEventFilter<[], {}>

    OrbitTokenBridgeTemplatesUpdated(): TypedEventFilter<[], {}>

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >
  }

  estimateGas: {
    canonicalL2BeaconProxyFactoryAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    canonicalL2FactoryAddress(overrides?: CallOverrides): Promise<BigNumber>

    canonicalL2ProxyAdminAddress(overrides?: CallOverrides): Promise<BigNumber>

    createTokenBridge(
      inbox: string,
      maxGasForContracts: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    gasLimitForL2FactoryDeployment(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCanonicalL1RouterAddress(
      inbox: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCanonicalL2CustomGatewayAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCanonicalL2RouterAddress(overrides?: CallOverrides): Promise<BigNumber>

    getCanonicalL2StandardGatewayAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCanonicalL2UpgradeExecutorAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCanonicalL2WethAddress(overrides?: CallOverrides): Promise<BigNumber>

    getCanonicalL2WethGatewayAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRouter(inbox: string, overrides?: CallOverrides): Promise<BigNumber>

    inboxToNonCanonicalRouter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(
      _retryableSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    l1Templates(overrides?: CallOverrides): Promise<BigNumber>

    l1Weth(overrides?: CallOverrides): Promise<BigNumber>

    l2CustomGatewayTemplate(overrides?: CallOverrides): Promise<BigNumber>

    l2RouterTemplate(overrides?: CallOverrides): Promise<BigNumber>

    l2StandardGatewayTemplate(overrides?: CallOverrides): Promise<BigNumber>

    l2TokenBridgeFactoryTemplate(overrides?: CallOverrides): Promise<BigNumber>

    l2WethGatewayTemplate(overrides?: CallOverrides): Promise<BigNumber>

    l2WethTemplate(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    retryableSender(overrides?: CallOverrides): Promise<BigNumber>

    setNonCanonicalRouter(
      inbox: string,
      nonCanonicalRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setTemplates(
      _l1Templates: {
        routerTemplate: string
        standardGatewayTemplate: string
        customGatewayTemplate: string
        wethGatewayTemplate: string
        feeTokenBasedRouterTemplate: string
        feeTokenBasedStandardGatewayTemplate: string
        feeTokenBasedCustomGatewayTemplate: string
        upgradeExecutor: string
      },
      _l2TokenBridgeFactoryTemplate: string,
      _l2RouterTemplate: string,
      _l2StandardGatewayTemplate: string,
      _l2CustomGatewayTemplate: string,
      _l2WethGatewayTemplate: string,
      _l2WethTemplate: string,
      _l1Weth: string,
      _gasLimitForL2FactoryDeployment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    canonicalL2BeaconProxyFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    canonicalL2FactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    canonicalL2ProxyAdminAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    createTokenBridge(
      inbox: string,
      maxGasForContracts: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    gasLimitForL2FactoryDeployment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCanonicalL1RouterAddress(
      inbox: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCanonicalL2CustomGatewayAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCanonicalL2RouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCanonicalL2StandardGatewayAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCanonicalL2UpgradeExecutorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCanonicalL2WethAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCanonicalL2WethGatewayAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRouter(
      inbox: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    inboxToNonCanonicalRouter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      _retryableSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    l1Templates(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l1Weth(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2CustomGatewayTemplate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    l2RouterTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2StandardGatewayTemplate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    l2TokenBridgeFactoryTemplate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    l2WethGatewayTemplate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    l2WethTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    retryableSender(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setNonCanonicalRouter(
      inbox: string,
      nonCanonicalRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setTemplates(
      _l1Templates: {
        routerTemplate: string
        standardGatewayTemplate: string
        customGatewayTemplate: string
        wethGatewayTemplate: string
        feeTokenBasedRouterTemplate: string
        feeTokenBasedStandardGatewayTemplate: string
        feeTokenBasedCustomGatewayTemplate: string
        upgradeExecutor: string
      },
      _l2TokenBridgeFactoryTemplate: string,
      _l2RouterTemplate: string,
      _l2StandardGatewayTemplate: string,
      _l2CustomGatewayTemplate: string,
      _l2WethGatewayTemplate: string,
      _l2WethTemplate: string,
      _l1Weth: string,
      _gasLimitForL2FactoryDeployment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
