/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface AbsInboxMockInterface extends ethers.utils.Interface {
  functions: {
    'activeOutbox()': FunctionFragment
    'bridge()': FunctionFragment
    'l2ToL1Sender()': FunctionFragment
    'l2ToL1SenderMock()': FunctionFragment
    'seqNum()': FunctionFragment
    'setL2ToL1Sender(address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'activeOutbox',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'bridge', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'l2ToL1Sender',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2ToL1SenderMock',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'seqNum', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setL2ToL1Sender',
    values: [string]
  ): string

  decodeFunctionResult(
    functionFragment: 'activeOutbox',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'bridge', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'l2ToL1Sender',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'l2ToL1SenderMock',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'seqNum', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setL2ToL1Sender',
    data: BytesLike
  ): Result

  events: {
    'InboxRetryableTicket(address,address,uint256,uint256,bytes)': EventFragment
    'RefundAddresses(address,address)': EventFragment
    'TicketData(uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'InboxRetryableTicket'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RefundAddresses'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TicketData'): EventFragment
}

export type InboxRetryableTicketEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string] & {
    from: string
    to: string
    value: BigNumber
    maxGas: BigNumber
    data: string
  }
>

export type RefundAddressesEvent = TypedEvent<
  [string, string] & {
    excessFeeRefundAddress: string
    callValueRefundAddress: string
  }
>

export type TicketDataEvent = TypedEvent<
  [BigNumber] & { maxSubmissionCost: BigNumber }
>

export class AbsInboxMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: AbsInboxMockInterface

  functions: {
    activeOutbox(overrides?: CallOverrides): Promise<[string]>

    bridge(overrides?: CallOverrides): Promise<[string]>

    l2ToL1Sender(overrides?: CallOverrides): Promise<[string]>

    l2ToL1SenderMock(overrides?: CallOverrides): Promise<[string]>

    seqNum(overrides?: CallOverrides): Promise<[BigNumber]>

    setL2ToL1Sender(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  activeOutbox(overrides?: CallOverrides): Promise<string>

  bridge(overrides?: CallOverrides): Promise<string>

  l2ToL1Sender(overrides?: CallOverrides): Promise<string>

  l2ToL1SenderMock(overrides?: CallOverrides): Promise<string>

  seqNum(overrides?: CallOverrides): Promise<BigNumber>

  setL2ToL1Sender(
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    activeOutbox(overrides?: CallOverrides): Promise<string>

    bridge(overrides?: CallOverrides): Promise<string>

    l2ToL1Sender(overrides?: CallOverrides): Promise<string>

    l2ToL1SenderMock(overrides?: CallOverrides): Promise<string>

    seqNum(overrides?: CallOverrides): Promise<BigNumber>

    setL2ToL1Sender(sender: string, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'InboxRetryableTicket(address,address,uint256,uint256,bytes)'(
      from?: null,
      to?: null,
      value?: null,
      maxGas?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        from: string
        to: string
        value: BigNumber
        maxGas: BigNumber
        data: string
      }
    >

    InboxRetryableTicket(
      from?: null,
      to?: null,
      value?: null,
      maxGas?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        from: string
        to: string
        value: BigNumber
        maxGas: BigNumber
        data: string
      }
    >

    'RefundAddresses(address,address)'(
      excessFeeRefundAddress?: null,
      callValueRefundAddress?: null
    ): TypedEventFilter<
      [string, string],
      { excessFeeRefundAddress: string; callValueRefundAddress: string }
    >

    RefundAddresses(
      excessFeeRefundAddress?: null,
      callValueRefundAddress?: null
    ): TypedEventFilter<
      [string, string],
      { excessFeeRefundAddress: string; callValueRefundAddress: string }
    >

    'TicketData(uint256)'(
      maxSubmissionCost?: null
    ): TypedEventFilter<[BigNumber], { maxSubmissionCost: BigNumber }>

    TicketData(
      maxSubmissionCost?: null
    ): TypedEventFilter<[BigNumber], { maxSubmissionCost: BigNumber }>
  }

  estimateGas: {
    activeOutbox(overrides?: CallOverrides): Promise<BigNumber>

    bridge(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1Sender(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1SenderMock(overrides?: CallOverrides): Promise<BigNumber>

    seqNum(overrides?: CallOverrides): Promise<BigNumber>

    setL2ToL1Sender(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    activeOutbox(overrides?: CallOverrides): Promise<PopulatedTransaction>

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2ToL1Sender(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2ToL1SenderMock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    seqNum(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setL2ToL1Sender(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
