/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers'
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomiclabs/hardhat-ethers/types'

import * as Contracts from '.'

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'IBridge',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>
    getContractFactory(
      name: 'IDelayedMessageProvider',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelayedMessageProvider__factory>
    getContractFactory(
      name: 'IInbox',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInbox__factory>
    getContractFactory(
      name: 'IOutbox',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOutbox__factory>
    getContractFactory(
      name: 'IOwnable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>
    getContractFactory(
      name: 'ISequencerInbox',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISequencerInbox__factory>
    getContractFactory(
      name: 'IGasRefunder',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGasRefunder__factory>
    getContractFactory(
      name: 'ArbSys',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbSys__factory>
    getContractFactory(
      name: 'AccessControlUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>
    getContractFactory(
      name: 'IAccessControlUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>
    getContractFactory(
      name: 'OwnableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>
    getContractFactory(
      name: 'Initializable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>
    getContractFactory(
      name: 'IERC20PermitUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>
    getContractFactory(
      name: 'IERC20MetadataUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>
    getContractFactory(
      name: 'IERC20Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>
    getContractFactory(
      name: 'ContextUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>
    getContractFactory(
      name: 'EIP712Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Upgradeable__factory>
    getContractFactory(
      name: 'ERC165Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>
    getContractFactory(
      name: 'IERC165Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>
    getContractFactory(
      name: 'Ownable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>
    getContractFactory(
      name: 'IERC1822Proxiable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>
    getContractFactory(
      name: 'IERC1967',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>
    getContractFactory(
      name: 'BeaconProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>
    getContractFactory(
      name: 'IBeacon',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>
    getContractFactory(
      name: 'UpgradeableBeacon',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>
    getContractFactory(
      name: 'ERC1967Proxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>
    getContractFactory(
      name: 'ERC1967Upgrade',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>
    getContractFactory(
      name: 'Proxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>
    getContractFactory(
      name: 'ProxyAdmin',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>
    getContractFactory(
      name: 'ITransparentUpgradeableProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransparentUpgradeableProxy__factory>
    getContractFactory(
      name: 'TransparentUpgradeableProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>
    getContractFactory(
      name: 'IERC20Permit',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>
    getContractFactory(
      name: 'IERC20Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>
    getContractFactory(
      name: 'ArbMulticall2',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbMulticall2__factory>
    getContractFactory(
      name: 'Multicall2',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall2__factory>
    getContractFactory(
      name: 'NodeInterface',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NodeInterface__factory>
    getContractFactory(
      name: 'RetryableTicketCreator',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RetryableTicketCreator__factory>
    getContractFactory(
      name: 'L2ArbitrumGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2ArbitrumGateway__factory>
    getContractFactory(
      name: 'L2CustomGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2CustomGateway__factory>
    getContractFactory(
      name: 'L2ERC20Gateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2ERC20Gateway__factory>
    getContractFactory(
      name: 'L2GatewayRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2GatewayRouter__factory>
    getContractFactory(
      name: 'L2ReverseCustomGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2ReverseCustomGateway__factory>
    getContractFactory(
      name: 'L2WethGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2WethGateway__factory>
    getContractFactory(
      name: 'IArbToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbToken__factory>
    getContractFactory(
      name: 'L2ArbitrumMessenger',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2ArbitrumMessenger__factory>
    getContractFactory(
      name: 'L2AtomicTokenBridgeFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2AtomicTokenBridgeFactory__factory>
    getContractFactory(
      name: 'OrbitSalts',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrbitSalts__factory>
    getContractFactory(
      name: 'ReverseArbToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReverseArbToken__factory>
    getContractFactory(
      name: 'StandardArbERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardArbERC20__factory>
    getContractFactory(
      name: 'IL1ArbitrumGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1ArbitrumGateway__factory>
    getContractFactory(
      name: 'IL1GatewayRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1GatewayRouter__factory>
    getContractFactory(
      name: 'ITradeableExitReceiver',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITradeableExitReceiver__factory>
    getContractFactory(
      name: 'L1ArbitrumExtendedGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ArbitrumExtendedGateway__factory>
    getContractFactory(
      name: 'L1ArbitrumGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ArbitrumGateway__factory>
    getContractFactory(
      name: 'L1CustomGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1CustomGateway__factory>
    getContractFactory(
      name: 'L1ERC20Gateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ERC20Gateway__factory>
    getContractFactory(
      name: 'L1ForceOnlyReverseCustomGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ForceOnlyReverseCustomGateway__factory>
    getContractFactory(
      name: 'L1GatewayRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1GatewayRouter__factory>
    getContractFactory(
      name: 'L1OrbitCustomGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1OrbitCustomGateway__factory>
    getContractFactory(
      name: 'L1OrbitERC20Gateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1OrbitERC20Gateway__factory>
    getContractFactory(
      name: 'L1OrbitGatewayRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1OrbitGatewayRouter__factory>
    getContractFactory(
      name: 'L1OrbitReverseCustomGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1OrbitReverseCustomGateway__factory>
    getContractFactory(
      name: 'L1ReverseCustomGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ReverseCustomGateway__factory>
    getContractFactory(
      name: 'L1WethGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1WethGateway__factory>
    getContractFactory(
      name: 'ArbitrumEnabledToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumEnabledToken__factory>
    getContractFactory(
      name: 'ICustomToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICustomToken__factory>
    getContractFactory(
      name: 'L1MintableToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1MintableToken__factory>
    getContractFactory(
      name: 'L1ReverseToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ReverseToken__factory>
    getContractFactory(
      name: 'IERC20Inbox',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Inbox__factory>
    getContractFactory(
      name: 'IEthInbox',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEthInbox__factory>
    getContractFactory(
      name: 'L1ArbitrumMessenger',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ArbitrumMessenger__factory>
    getContractFactory(
      name: 'IERC20Bridge',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Bridge__factory>
    getContractFactory(
      name: 'IInboxProxyAdmin',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInboxProxyAdmin__factory>
    getContractFactory(
      name: 'L1AtomicTokenBridgeCreator',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1AtomicTokenBridgeCreator__factory>
    getContractFactory(
      name: 'IERC20Inbox',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Inbox__factory>
    getContractFactory(
      name: 'L1TokenBridgeRetryableSender',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1TokenBridgeRetryableSender__factory>
    getContractFactory(
      name: 'AeERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AeERC20__factory>
    getContractFactory(
      name: 'AeWETH',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AeWETH__factory>
    getContractFactory(
      name: 'BeaconProxyFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxyFactory__factory>
    getContractFactory(
      name: 'ClonableBeaconProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClonableBeaconProxy__factory>
    getContractFactory(
      name: 'ProxySetter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxySetter__factory>
    getContractFactory(
      name: 'Cloneable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cloneable__factory>
    getContractFactory(
      name: 'ERC20PermitUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitUpgradeable__factory>
    getContractFactory(
      name: 'ERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>
    getContractFactory(
      name: 'ERC20Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>
    getContractFactory(
      name: 'GatewayRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayRouter__factory>
    getContractFactory(
      name: 'ICustomGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICustomGateway__factory>
    getContractFactory(
      name: 'IGatewayRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGatewayRouter__factory>
    getContractFactory(
      name: 'ITokenGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenGateway__factory>
    getContractFactory(
      name: 'TokenGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenGateway__factory>
    getContractFactory(
      name: 'ICloneable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICloneable__factory>
    getContractFactory(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>
    getContractFactory(
      name: 'IERC20Bridge',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Bridge__factory>
    getContractFactory(
      name: 'ITransferAndCall',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransferAndCall__factory>
    getContractFactory(
      name: 'ITransferAndCallReceiver',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransferAndCallReceiver__factory>
    getContractFactory(
      name: 'IWETH9',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH9__factory>
    getContractFactory(
      name: 'L2CustomGatewayToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2CustomGatewayToken__factory>
    getContractFactory(
      name: 'L2GatewayToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2GatewayToken__factory>
    getContractFactory(
      name: 'TransferAndCallToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferAndCallToken__factory>
    getContractFactory(
      name: 'UpgradeExecutor',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeExecutor__factory>
    getContractFactory(
      name: 'Whitelist',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Whitelist__factory>
    getContractFactory(
      name: 'WhitelistConsumer',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistConsumer__factory>
    getContractFactory(
      name: 'AddressMappingTest',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressMappingTest__factory>
    getContractFactory(
      name: 'ArbSysMock',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbSysMock__factory>
    getContractFactory(
      name: 'AbsInboxMock',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbsInboxMock__factory>
    getContractFactory(
      name: 'ERC20InboxMock',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20InboxMock__factory>
    getContractFactory(
      name: 'InboxMock',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InboxMock__factory>
    getContractFactory(
      name: 'MintableTestArbCustomToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableTestArbCustomToken__factory>
    getContractFactory(
      name: 'ReverseTestArbCustomToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReverseTestArbCustomToken__factory>
    getContractFactory(
      name: 'TestArbCustomToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestArbCustomToken__factory>
    getContractFactory(
      name: 'TestArbCustomTokenBurnFee',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestArbCustomTokenBurnFee__factory>
    getContractFactory(
      name: 'TestBytesParser',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestBytesParser__factory>
    getContractFactory(
      name: 'IGatewayRouter2',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGatewayRouter2__factory>
    getContractFactory(
      name: 'IL1CustomGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1CustomGateway__factory>
    getContractFactory(
      name: 'IL1OrbitCustomGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1OrbitCustomGateway__factory>
    getContractFactory(
      name: 'IOrbitGatewayRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOrbitGatewayRouter__factory>
    getContractFactory(
      name: 'MintableTestCustomTokenL1',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableTestCustomTokenL1__factory>
    getContractFactory(
      name: 'ReverseTestCustomTokenL1',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReverseTestCustomTokenL1__factory>
    getContractFactory(
      name: 'TestCustomTokenL1',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCustomTokenL1__factory>
    getContractFactory(
      name: 'TestOrbitCustomTokenL1',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestOrbitCustomTokenL1__factory>
    getContractFactory(
      name: 'Bytes32ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bytes32ERC20__factory>
    getContractFactory(
      name: 'Bytes32ERC20WithMetadata',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bytes32ERC20WithMetadata__factory>
    getContractFactory(
      name: 'TestERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>
    getContractFactory(
      name: 'L2Called',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2Called__factory>
    getContractFactory(
      name: 'TestWETH9',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestWETH9__factory>

    getContractAt(
      name: 'IBridge',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>
    getContractAt(
      name: 'IDelayedMessageProvider',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelayedMessageProvider>
    getContractAt(
      name: 'IInbox',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInbox>
    getContractAt(
      name: 'IOutbox',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOutbox>
    getContractAt(
      name: 'IOwnable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>
    getContractAt(
      name: 'ISequencerInbox',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISequencerInbox>
    getContractAt(
      name: 'IGasRefunder',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGasRefunder>
    getContractAt(
      name: 'ArbSys',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbSys>
    getContractAt(
      name: 'AccessControlUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>
    getContractAt(
      name: 'IAccessControlUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>
    getContractAt(
      name: 'OwnableUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>
    getContractAt(
      name: 'Initializable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>
    getContractAt(
      name: 'IERC20PermitUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>
    getContractAt(
      name: 'IERC20MetadataUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>
    getContractAt(
      name: 'IERC20Upgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>
    getContractAt(
      name: 'ContextUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>
    getContractAt(
      name: 'EIP712Upgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Upgradeable>
    getContractAt(
      name: 'ERC165Upgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>
    getContractAt(
      name: 'IERC165Upgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>
    getContractAt(
      name: 'Ownable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>
    getContractAt(
      name: 'IERC1822Proxiable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>
    getContractAt(
      name: 'IERC1967',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>
    getContractAt(
      name: 'BeaconProxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxy>
    getContractAt(
      name: 'IBeacon',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>
    getContractAt(
      name: 'UpgradeableBeacon',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableBeacon>
    getContractAt(
      name: 'ERC1967Proxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>
    getContractAt(
      name: 'ERC1967Upgrade',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>
    getContractAt(
      name: 'Proxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>
    getContractAt(
      name: 'ProxyAdmin',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>
    getContractAt(
      name: 'ITransparentUpgradeableProxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransparentUpgradeableProxy>
    getContractAt(
      name: 'TransparentUpgradeableProxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>
    getContractAt(
      name: 'ERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>
    getContractAt(
      name: 'IERC20Permit',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>
    getContractAt(
      name: 'IERC20Metadata',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>
    getContractAt(
      name: 'IERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>
    getContractAt(
      name: 'ArbMulticall2',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbMulticall2>
    getContractAt(
      name: 'Multicall2',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall2>
    getContractAt(
      name: 'NodeInterface',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NodeInterface>
    getContractAt(
      name: 'RetryableTicketCreator',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RetryableTicketCreator>
    getContractAt(
      name: 'L2ArbitrumGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2ArbitrumGateway>
    getContractAt(
      name: 'L2CustomGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2CustomGateway>
    getContractAt(
      name: 'L2ERC20Gateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2ERC20Gateway>
    getContractAt(
      name: 'L2GatewayRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2GatewayRouter>
    getContractAt(
      name: 'L2ReverseCustomGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2ReverseCustomGateway>
    getContractAt(
      name: 'L2WethGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2WethGateway>
    getContractAt(
      name: 'IArbToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IArbToken>
    getContractAt(
      name: 'L2ArbitrumMessenger',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2ArbitrumMessenger>
    getContractAt(
      name: 'L2AtomicTokenBridgeFactory',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2AtomicTokenBridgeFactory>
    getContractAt(
      name: 'OrbitSalts',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OrbitSalts>
    getContractAt(
      name: 'ReverseArbToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReverseArbToken>
    getContractAt(
      name: 'StandardArbERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardArbERC20>
    getContractAt(
      name: 'IL1ArbitrumGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1ArbitrumGateway>
    getContractAt(
      name: 'IL1GatewayRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1GatewayRouter>
    getContractAt(
      name: 'ITradeableExitReceiver',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITradeableExitReceiver>
    getContractAt(
      name: 'L1ArbitrumExtendedGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ArbitrumExtendedGateway>
    getContractAt(
      name: 'L1ArbitrumGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ArbitrumGateway>
    getContractAt(
      name: 'L1CustomGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1CustomGateway>
    getContractAt(
      name: 'L1ERC20Gateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ERC20Gateway>
    getContractAt(
      name: 'L1ForceOnlyReverseCustomGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ForceOnlyReverseCustomGateway>
    getContractAt(
      name: 'L1GatewayRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1GatewayRouter>
    getContractAt(
      name: 'L1OrbitCustomGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1OrbitCustomGateway>
    getContractAt(
      name: 'L1OrbitERC20Gateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1OrbitERC20Gateway>
    getContractAt(
      name: 'L1OrbitGatewayRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1OrbitGatewayRouter>
    getContractAt(
      name: 'L1OrbitReverseCustomGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1OrbitReverseCustomGateway>
    getContractAt(
      name: 'L1ReverseCustomGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ReverseCustomGateway>
    getContractAt(
      name: 'L1WethGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1WethGateway>
    getContractAt(
      name: 'ArbitrumEnabledToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumEnabledToken>
    getContractAt(
      name: 'ICustomToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICustomToken>
    getContractAt(
      name: 'L1MintableToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1MintableToken>
    getContractAt(
      name: 'L1ReverseToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ReverseToken>
    getContractAt(
      name: 'IERC20Inbox',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Inbox>
    getContractAt(
      name: 'IEthInbox',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEthInbox>
    getContractAt(
      name: 'L1ArbitrumMessenger',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ArbitrumMessenger>
    getContractAt(
      name: 'IERC20Bridge',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Bridge>
    getContractAt(
      name: 'IInboxProxyAdmin',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInboxProxyAdmin>
    getContractAt(
      name: 'L1AtomicTokenBridgeCreator',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1AtomicTokenBridgeCreator>
    getContractAt(
      name: 'IERC20Inbox',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Inbox>
    getContractAt(
      name: 'L1TokenBridgeRetryableSender',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1TokenBridgeRetryableSender>
    getContractAt(
      name: 'AeERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AeERC20>
    getContractAt(
      name: 'AeWETH',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AeWETH>
    getContractAt(
      name: 'BeaconProxyFactory',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxyFactory>
    getContractAt(
      name: 'ClonableBeaconProxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClonableBeaconProxy>
    getContractAt(
      name: 'ProxySetter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxySetter>
    getContractAt(
      name: 'Cloneable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Cloneable>
    getContractAt(
      name: 'ERC20PermitUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitUpgradeable>
    getContractAt(
      name: 'ERC165',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>
    getContractAt(
      name: 'ERC20Upgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>
    getContractAt(
      name: 'GatewayRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayRouter>
    getContractAt(
      name: 'ICustomGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICustomGateway>
    getContractAt(
      name: 'IGatewayRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGatewayRouter>
    getContractAt(
      name: 'ITokenGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenGateway>
    getContractAt(
      name: 'TokenGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenGateway>
    getContractAt(
      name: 'ICloneable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICloneable>
    getContractAt(
      name: 'IERC165',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>
    getContractAt(
      name: 'IERC20Bridge',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Bridge>
    getContractAt(
      name: 'ITransferAndCall',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransferAndCall>
    getContractAt(
      name: 'ITransferAndCallReceiver',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransferAndCallReceiver>
    getContractAt(
      name: 'IWETH9',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH9>
    getContractAt(
      name: 'L2CustomGatewayToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2CustomGatewayToken>
    getContractAt(
      name: 'L2GatewayToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2GatewayToken>
    getContractAt(
      name: 'TransferAndCallToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferAndCallToken>
    getContractAt(
      name: 'UpgradeExecutor',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeExecutor>
    getContractAt(
      name: 'Whitelist',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Whitelist>
    getContractAt(
      name: 'WhitelistConsumer',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistConsumer>
    getContractAt(
      name: 'AddressMappingTest',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressMappingTest>
    getContractAt(
      name: 'ArbSysMock',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbSysMock>
    getContractAt(
      name: 'AbsInboxMock',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbsInboxMock>
    getContractAt(
      name: 'ERC20InboxMock',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20InboxMock>
    getContractAt(
      name: 'InboxMock',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InboxMock>
    getContractAt(
      name: 'MintableTestArbCustomToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableTestArbCustomToken>
    getContractAt(
      name: 'ReverseTestArbCustomToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReverseTestArbCustomToken>
    getContractAt(
      name: 'TestArbCustomToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestArbCustomToken>
    getContractAt(
      name: 'TestArbCustomTokenBurnFee',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestArbCustomTokenBurnFee>
    getContractAt(
      name: 'TestBytesParser',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestBytesParser>
    getContractAt(
      name: 'IGatewayRouter2',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGatewayRouter2>
    getContractAt(
      name: 'IL1CustomGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1CustomGateway>
    getContractAt(
      name: 'IL1OrbitCustomGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1OrbitCustomGateway>
    getContractAt(
      name: 'IOrbitGatewayRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOrbitGatewayRouter>
    getContractAt(
      name: 'MintableTestCustomTokenL1',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableTestCustomTokenL1>
    getContractAt(
      name: 'ReverseTestCustomTokenL1',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReverseTestCustomTokenL1>
    getContractAt(
      name: 'TestCustomTokenL1',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCustomTokenL1>
    getContractAt(
      name: 'TestOrbitCustomTokenL1',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestOrbitCustomTokenL1>
    getContractAt(
      name: 'Bytes32ERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bytes32ERC20>
    getContractAt(
      name: 'Bytes32ERC20WithMetadata',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bytes32ERC20WithMetadata>
    getContractAt(
      name: 'TestERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>
    getContractAt(
      name: 'L2Called',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2Called>
    getContractAt(
      name: 'TestWETH9',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestWETH9>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>
  }
}
